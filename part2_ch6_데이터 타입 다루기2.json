{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072033211_-997206827","id":"20201227-212713_1724352519","dateCreated":"2020-12-27T21:27:13+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11318","text":"val retail=spark.read.format(\"csv\")\n        .option(\"header\",\"true\")\n        .option(\"inferSchema\",\"true\")\n        .load(\"C:/HadoopEco/spark-2.4.7-bin-hadoop2.7/data/retail-data/by-day/2010-12-01.csv\")\n\nretail.printSchema()        \nretail.createOrReplaceTempView(\"retailTable\")","dateUpdated":"2020-12-27T21:31:27+0900","dateFinished":"2020-12-27T21:31:28+0900","dateStarted":"2020-12-27T21:31:27+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: timestamp (nullable = true)\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: double (nullable = true)\n |-- Country: string (nullable = true)\n\r\nretail: org.apache.spark.sql.DataFrame = [InvoiceNo: string, StockCode: string ... 6 more fields]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072037753_968631196","id":"20201227-212717_259100245","dateCreated":"2020-12-27T21:27:17+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11395","text":"%md\n\n#### 9. 복합 데이터 타입\n1) 구조체\n2) 배열\n3) 맵","dateUpdated":"2020-12-27T21:46:57+0900","dateFinished":"2020-12-27T21:46:58+0900","dateStarted":"2020-12-27T21:46:57+0900","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>9. 복합 데이터 타입</h4>\n<p>1) 구조체<br/>2) 배열<br/>3) 맵</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072276514_-482161321","id":"20201227-213116_413989504","dateCreated":"2020-12-27T21:31:16+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11537","text":"// 1) 구조체 : 쿼리문에서 다수의 컬럼을 괄호로 묶어 구조체 만들 수 있음.\nimport org.apache.spark.sql.functions.struct\n\nval comexDF=retail.select(struct(\"Description\",\"InvoiceNo\").alias(\"complex\"))\ncomexDF.createOrReplaceTempView(\"complexDF\")\n\n// complexDF의 complex행에 getField로 Description 삽입\ncomexDF.select(\"complex.Description\")\ncomexDF.select(col(\"complex\").getField(\"Description\"))","dateUpdated":"2020-12-27T21:46:55+0900","dateFinished":"2020-12-27T21:46:57+0900","dateStarted":"2020-12-27T21:46:55+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.struct\r\ncomexDF: org.apache.spark.sql.DataFrame = [complex: struct<Description: string, InvoiceNo: string>]\r\nres146: org.apache.spark.sql.DataFrame = [complex.Description: string]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072356396_1526790982","id":"20201227-213236_1324689040","dateCreated":"2020-12-27T21:32:36+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11658","text":"// 2) 배열\n// split\nimport org.apache.spark.sql.functions.split\nretail.select(split(col(\"Description\"),\" \")).show(3)    // 빈칸으로 자름\n\n// 배열의 길이\nimport org.apache.spark.sql.functions.size\nretail.select(size(split(col(\"Description\"),\" \"))).show(3)\n\n// array_contains : 배열에 특정 값이 존재하는지 확인\nimport org.apache.spark.sql.functions.array_contains\nretail.select(array_contains(split(col(\"Description\"),\" \"),\"WHITE\")).show(3)\n\n// explode : 배열 타입의 컬럼을 입력 받음.\n// 입력된 컬럼의 배열 값에 포함된 모든 값을 로우로 변환. 컬럼값은 중복되어 표시\nimport org.apache.spark.sql.functions.{split,explode}\nretail.withColumn(\"splitted\",split(col(\"Description\"),\" \"))\n    .withColumn(\"explode\",explode(col(\"splitted\")))\n    .select(\"Description\",\"InvoiceNo\",\"explode\").show(2)\n","dateUpdated":"2020-12-27T21:56:16+0900","dateFinished":"2020-12-27T21:56:05+0900","dateStarted":"2020-12-27T21:56:03+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+\n|split(Description,  )|\n+---------------------+\n| [WHITE, HANGING, ...|\n| [WHITE, METAL, LA...|\n| [CREAM, CUPID, HE...|\n+---------------------+\nonly showing top 3 rows\n\r\n+---------------------------+\n|size(split(Description,  ))|\n+---------------------------+\n|                          5|\n|                          3|\n|                          5|\n+---------------------------+\nonly showing top 3 rows\n\r\n+--------------------------------------------+\n|array_contains(split(Description,  ), WHITE)|\n+--------------------------------------------+\n|                                        true|\n|                                        true|\n|                                       false|\n+--------------------------------------------+\nonly showing top 3 rows\n\r\n+--------------------+---------+-------+\n|         Description|InvoiceNo|explode|\n+--------------------+---------+-------+\n|WHITE HANGING HEA...|   536365|  WHITE|\n|WHITE HANGING HEA...|   536365|HANGING|\n+--------------------+---------+-------+\nonly showing top 2 rows\n\r\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|   17850.0|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|   17850.0|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|2010-12-01 08:26:00|     2.75|   17850.0|United Kingdom|\n|   536365|   84029G|KNITTED UNION FLA...|       6|2010-12-01 08:26:00|     3.39|   17850.0|United Kingdom|\n|   536365|   84029E|RED WOOLLY HOTTIE...|       6|2010-12-01 08:26:00|     3.39|   17850.0|United Kingdom|\n|   536365|    22752|SET 7 BABUSHKA NE...|       2|2010-12-01 08:26:00|     7.65|   17850.0|United Kingdom|\n|   536365|    21730|GLASS STAR FROSTE...|       6|2010-12-01 08:26:00|     4.25|   17850.0|United Kingdom|\n|   536366|    22633|HAND WARMER UNION...|       6|2010-12-01 08:28:00|     1.85|   17850.0|United Kingdom|\n|   536366|    22632|HAND WARMER RED P...|       6|2010-12-01 08:28:00|     1.85|   17850.0|United Kingdom|\n|   536367|    84879|ASSORTED COLOUR B...|      32|2010-12-01 08:34:00|     1.69|   13047.0|United Kingdom|\n|   536367|    22745|POPPY'S PLAYHOUSE...|       6|2010-12-01 08:34:00|      2.1|   13047.0|United Kingdom|\n|   536367|    22748|POPPY'S PLAYHOUSE...|       6|2010-12-01 08:34:00|      2.1|   13047.0|United Kingdom|\n|   536367|    22749|FELTCRAFT PRINCES...|       8|2010-12-01 08:34:00|     3.75|   13047.0|United Kingdom|\n|   536367|    22310|IVORY KNITTED MUG...|       6|2010-12-01 08:34:00|     1.65|   13047.0|United Kingdom|\n|   536367|    84969|BOX OF 6 ASSORTED...|       6|2010-12-01 08:34:00|     4.25|   13047.0|United Kingdom|\n|   536367|    22623|BOX OF VINTAGE JI...|       3|2010-12-01 08:34:00|     4.95|   13047.0|United Kingdom|\n|   536367|    22622|BOX OF VINTAGE AL...|       2|2010-12-01 08:34:00|     9.95|   13047.0|United Kingdom|\n|   536367|    21754|HOME BUILDING BLO...|       3|2010-12-01 08:34:00|     5.95|   13047.0|United Kingdom|\n|   536367|    21755|LOVE BUILDING BLO...|       3|2010-12-01 08:34:00|     5.95|   13047.0|United Kingdom|\n|   536367|    21777|RECIPE BOX WITH M...|       4|2010-12-01 08:34:00|     7.95|   13047.0|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 20 rows\n\r\nimport org.apache.spark.sql.functions.split\r\nimport org.apache.spark.sql.functions.size\r\nimport org.apache.spark.sql.functions.array_contains\r\nimport org.apache.spark.sql.functions.{split, explode}\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072361674_1198407881","id":"20201227-213241_2127407943","dateCreated":"2020-12-27T21:32:41+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11730","text":"// 3) Map : 컬럼의 키-값 쌍을 이용해 생성\nimport org.apache.spark.sql.functions.map\nretail.select(map(col(\"InvoiceNo\"),col(\"Description\")).alias(\"complex_map\")).show(2)\n\n// 적합한 키를 사용하여 데이터를 조회, 해당 키가 없다면 null 값을 반환\nretail.select(map(col(\"InvoiceNo\"),col(\"Description\")).alias(\"complex_map\"))\n    .selectExpr(\"complex_map['WHITE METAL LANTERN']\").show(2)\n","dateUpdated":"2020-12-27T22:03:03+0900","dateFinished":"2020-12-27T22:03:04+0900","dateStarted":"2020-12-27T22:03:03+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+\n|         complex_map|\n+--------------------+\n|[536365 -> WHITE ...|\n|[536365 -> WHITE ...|\n+--------------------+\nonly showing top 2 rows\n\r\n+--------------------------------+\n|complex_map[WHITE METAL LANTERN]|\n+--------------------------------+\n|                            null|\n|                            null|\n+--------------------------------+\nonly showing top 2 rows\n\r\nimport org.apache.spark.sql.functions.map\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072362295_-365272710","id":"20201227-213242_955091401","dateCreated":"2020-12-27T21:32:42+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11874","text":"// map 타입은 분해하여 컬럼으로 변환\nretail.select(map(col(\"InvoiceNo\"),col(\"Description\")).alias(\"complex_map\"))\n    .selectExpr(\"explode(complex_map)\").show(2)\n","dateUpdated":"2020-12-27T22:04:22+0900","dateFinished":"2020-12-27T22:04:23+0900","dateStarted":"2020-12-27T22:04:22+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------------------+\n|   key|               value|\n+------+--------------------+\n|536365|WHITE HANGING HEA...|\n|536365| WHITE METAL LANTERN|\n+------+--------------------+\nonly showing top 2 rows\n\r\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609072362095_-910819421","id":"20201227-213242_671939914","dateCreated":"2020-12-27T21:32:42+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11802","text":"%md\n#### 10. Json 타입","dateUpdated":"2020-12-27T22:05:58+0900","dateFinished":"2020-12-27T22:05:58+0900","dateStarted":"2020-12-27T22:05:58+0900","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>10. Json 타입</h4>\n</div>"}]}},{"text":"val jsonDF=spark.range(1).selectExpr(\"\"\"\n    '{\"myJsonKey\":{\"myJsonValue\":[1,2,3]}}' as jsonString\"\"\")\n    \n// get_json_object 함수로 json 객체를 인라인 쿼리로 조회\n// 중첩이 없는 단일 수준의 json 객체라면 json_tuple을 사용할 수 있음\nimport org.apache.spark.sql.functions.{get_json_object,json_tuple}\njsonDF.select(\n    get_json_object(col(\"jsonString\"),\"$.myJsonKey.myJsonValue[1]\") as \"column\",\n    json_tuple(col(\"jsonString\"),\"myJsonKey\")).show(2)","user":"anonymous","dateUpdated":"2020-12-27T22:23:06+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":170.724,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609074358415_-2029834622","id":"20201227-220558_1074987444","dateCreated":"2020-12-27T22:05:58+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12477","dateFinished":"2020-12-27T22:23:07+0900","dateStarted":"2020-12-27T22:23:06+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+--------------------+\n|column|                  c0|\n+------+--------------------+\n|     2|{\"myJsonValue\":[1...|\n+------+--------------------+\n\r\njsonDF: org.apache.spark.sql.DataFrame = [jsonString: string]\r\nimport org.apache.spark.sql.functions.{get_json_object, json_tuple}\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609074515560_489542999","id":"20201227-220835_1394324280","dateCreated":"2020-12-27T22:08:35+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12566","text":"// to_json 함수로 StructType을 Json 문자열로 변경\nimport org.apache.spark.sql.functions.to_json\nretail.selectExpr(\"(InvoiceNo,Description) as myStruct\")\n    .select(to_json(col(\"myStruct\"))).show(1)","dateUpdated":"2020-12-27T22:23:43+0900","dateFinished":"2020-12-27T22:23:44+0900","dateStarted":"2020-12-27T22:23:43+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------------+\n|structstojson(myStruct)|\n+-----------------------+\n|   {\"InvoiceNo\":\"536...|\n+-----------------------+\nonly showing top 1 row\n\r\nimport org.apache.spark.sql.functions.to_json\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609075385281_-825614467","id":"20201227-222305_1750411122","dateCreated":"2020-12-27T22:23:05+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12911","text":"// from_json 함수로 JSON 문자열을 다시 객체로 변환\n// 파라미터로 반드시 스키마 지정.\n// 필요에 따라 맵 데이터 타입의 옵션을 인수로 지정\nimport org.apache.spark.sql.functions.from_json\nimport org.apache.spark.sql.types._\n\nval parseSchema=new StructType(Array(\n    new StructField(\"InvoicNo\",StringType,true),\n    new StructField(\"Description\",StringType,true)))\n    \n\nretail.selectExpr(\"(InvoiceNo,Description) as myStruct\")\n    .select(to_json(col(\"myStruct\")).alias(\"newJSON\"))\n    .select(from_json(col(\"newJSON\"),parseSchema),col(\"newJSON\")).show(2)","dateUpdated":"2020-12-27T22:30:53+0900","dateFinished":"2020-12-27T22:30:54+0900","dateStarted":"2020-12-27T22:30:53+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------+--------------------+\n|jsontostructs(newJSON)|             newJSON|\n+----------------------+--------------------+\n|  [, WHITE HANGING ...|{\"InvoiceNo\":\"536...|\n|  [, WHITE METAL LA...|{\"InvoiceNo\":\"536...|\n+----------------------+--------------------+\nonly showing top 2 rows\n\r\nimport org.apache.spark.sql.functions.from_json\r\nimport org.apache.spark.sql.types._\r\nparseSchema: org.apache.spark.sql.types.StructType = StructType(StructField(InvoicNo,StringType,true), StructField(Description,StringType,true))\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609075498147_-264764057","id":"20201227-222458_497555713","dateCreated":"2020-12-27T22:24:58+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13168","text":"%md\n#### 11. 사용자 정의 함수\n: 외부 라이브러리를 사용해 사용자가 원하는 형태로 트랜스포메이션을 만들 수 있게 한다.\n기본적으로 특정 SparkSession이나 Context에서 사용할 수 있도록 임시 함수 형태로 등록","dateUpdated":"2020-12-27T22:33:05+0900","dateFinished":"2020-12-27T22:33:05+0900","dateStarted":"2020-12-27T22:33:05+0900","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>11. 사용자 정의 함수</h4>\n<p>: 외부 라이브러리를 사용해 사용자가 원하는 형태로 트랜스포메이션을 만들 수 있게 한다.<br/>기본적으로 특정 SparkSession이나 Context에서 사용할 수 있도록 임시 함수 형태로 등록</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609075498440_2021417426","id":"20201227-222458_1534477201","dateCreated":"2020-12-27T22:24:58+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13240","text":"// 사용자 정의 함수 예제\nval udfExmDF=spark.range(5).toDF(\"num\")\ndef power3(number:Double):Double=number*number*number\npower3(2.0)","dateUpdated":"2020-12-27T22:34:24+0900","dateFinished":"2020-12-27T22:34:26+0900","dateStarted":"2020-12-27T22:34:24+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"udfExmDF: org.apache.spark.sql.DataFrame = [num: bigint]\r\npower3: (number: Double)Double\r\nres171: Double = 8.0\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609075497947_1465145681","id":"20201227-222457_1815412530","dateCreated":"2020-12-27T22:24:57+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13096","text":"// DataFrame에서 사용할 수 있도록 함수를 등록\nimport org.apache.spark.sql.functions.udf\n\nval power3udf=udf(power3(_:Double):Double)\nudfExmDF.select(power3udf(col(\"num\"))).show()","dateUpdated":"2020-12-27T22:38:44+0900","dateFinished":"2020-12-27T22:38:30+0900","dateStarted":"2020-12-27T22:38:28+0900","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+\n|UDF(num)|\n+--------+\n|     0.0|\n|     1.0|\n|     8.0|\n|    27.0|\n|    64.0|\n+--------+\n\r\nimport org.apache.spark.sql.functions.udf\r\npower3udf: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(DoubleType)))\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609075498971_1028974955","id":"20201227-222458_659260521","dateCreated":"2020-12-27T22:24:58+0900","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13312"}],"name":"part2_ch6_데이터 타입 다루기2","id":"2FU1UZMZ3","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
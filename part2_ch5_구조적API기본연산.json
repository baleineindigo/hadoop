{"paragraphs":[{"text":"spark","user":"anonymous","dateUpdated":"2020-12-26T12:23:37+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@7d2900c4\n"}]},"apps":[],"jobName":"paragraph_1608730905726_2043771611","id":"20201223-224145_1249402196","dateCreated":"2020-12-23T22:41:45+0900","dateStarted":"2020-12-26T12:23:37+0900","dateFinished":"2020-12-26T12:24:38+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:181"},{"text":"%md\n## 1. DataFrame 생성하기","user":"anonymous","dateUpdated":"2020-12-26T14:55:42+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>1. DataFrame 생성하기</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1608954471221_-901262833","id":"20201226-124751_2039650491","dateCreated":"2020-12-26T12:47:51+0900","dateStarted":"2020-12-26T14:55:42+0900","dateFinished":"2020-12-26T14:55:42+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:182"},{"text":"// 파일 불러오기\nval flight15=spark.read.format(\"json\").load(\"C:/HadoopEco/spark-2.4.7-bin-hadoop2.7/data/flight-data/json/2015-summary.json\")\nflight15","user":"anonymous","dateUpdated":"2020-12-26T21:18:23+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"flight15: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\r\nres3: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1608730910959_1367392289","id":"20201223-224150_966460942","dateCreated":"2020-12-23T22:41:50+0900","dateStarted":"2020-12-26T21:18:23+0900","dateFinished":"2020-12-26T21:18:34+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"text":"// 직접 DataFrame 만들기\nimport org.apache.spark.sql.types.{StructField,StructType,StringType,LongType}\nimport org.apache.spark.sql.types.Metadata\n\nval mySchema=StructType(Array(\n    StructField(\"DEST_COUNTRY_NAME\",StringType,true),\n    StructField(\"ORIGIN_COUNTRY_NAME\",StringType,true),\n    StructField(\"count\",LongType,false,\n                Metadata.fromJson(\"{\\\"hello\\\":\\\"world\\\"}\"))\n    ))","user":"anonymous","dateUpdated":"2020-12-26T15:02:47+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types.{StructField, StructType, StringType, LongType}\r\nimport org.apache.spark.sql.types.Metadata\r\nmySchema: org.apache.spark.sql.types.StructType = StructType(StructField(DEST_COUNTRY_NAME,StringType,true), StructField(ORIGIN_COUNTRY_NAME,StringType,true), StructField(count,LongType,false))\n"}]},"apps":[],"jobName":"paragraph_1608731207091_582830374","id":"20201223-224647_1609796724","dateCreated":"2020-12-23T22:46:47+0900","dateStarted":"2020-12-26T12:37:57+0900","dateFinished":"2020-12-26T12:37:59+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"text":"// Row객체를 가진 Seq타입을 변환하여 생성\nimport org.apache.spark.sql.Row\nval myDf=Seq((\"Hello\",2,1L),(\"Hi\",2,1L)).toDF(\"col1\",\"col2\",\"col3\")","user":"anonymous","dateUpdated":"2020-12-26T15:05:07+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":89.3229,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\r\nmyDf: org.apache.spark.sql.DataFrame = [col1: string, col2: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1608962549950_2030374585","id":"20201226-150229_820501292","dateCreated":"2020-12-26T15:02:29+0900","dateStarted":"2020-12-26T15:04:54+0900","dateFinished":"2020-12-26T15:04:55+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"text":"/* repartitions & coalesce\n- 두 메서드 모두 컬럼을 기준으로 데이터를 분할하여 최적화하는 기법\n*/\n\n/*repartitions : 전체 데이터를 셔플. 향후에 사용할 파티션 수가 현재 파티션 수보다 많거나 컬럼을 기준으로 파티션을 만드는 경우에만 사용\n특정 컬럼을 기준으로 자주 필터링 한다면 자주 필터링하는 컬럼을 기준으로 파티션을 재분배\n*/\nflight15.rdd.getNumPartitions   // 파티션 수 확인\nflight15.repartition(4)   // 파티션 수 지정\nflight15.repartition(4, col(\"DEST_COUNTRY_NAME\"))   // 파티션 수, 기준이 되는 컬럼 지정\n\n\n// coalesce : 전체 데이터를 셔플하지 않고 파티션을 병합하는 경우에 사용\nflight15.repartition(4, col(\"DEST_COUNTRY_NAME\")).coalesce(2)\n\n","user":"anonymous","dateUpdated":"2020-12-26T23:44:54+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res46: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1608993036119_1551905948","id":"20201226-233036_976136549","dateCreated":"2020-12-26T23:30:36+0900","dateStarted":"2020-12-26T23:44:54+0900","dateFinished":"2020-12-26T23:44:55+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:186"},{"text":"// 임의 분할하기\nval splitFlight15=flight15.randomSplit(Array(0.25,0.75),100)\nsplitFlight15(0).count() > splitFlight15(1).count()","user":"anonymous","dateUpdated":"2020-12-26T23:49:54+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"splitFlight15: Array[org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]] = Array([DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field], [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field])\r\nres50: Boolean = false\n"}]},"apps":[],"jobName":"paragraph_1608994077217_418909408","id":"20201226-234757_983233548","dateCreated":"2020-12-26T23:47:57+0900","dateStarted":"2020-12-26T23:49:54+0900","dateFinished":"2020-12-26T23:49:56+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187"},{"text":"%md\n#### **Select, SelectExpr\n    Select, SelectExpr로 DataFrame에 SQL문을 적용","user":"anonymous","dateUpdated":"2020-12-26T21:36:11+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>**Select, SelectExpr<br/> Select, SelectExpr로 DataFrame에 SQL문을 적용</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1608984883439_-562193260","id":"20201226-211443_1248157303","dateCreated":"2020-12-26T21:14:43+0900","dateStarted":"2020-12-26T21:36:11+0900","dateFinished":"2020-12-26T21:36:11+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:188"},{"text":"// Select, SelectExpr\nflight15.select(\"DEST_COUNTRY_NAME\",\"ORIGIN_COUNTRY_NAME\").show(3)\n","user":"anonymous","dateUpdated":"2020-12-26T21:18:47+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|\n+-----------------+-------------------+\n|    United States|            Romania|\n|    United States|            Croatia|\n|    United States|            Ireland|\n+-----------------+-------------------+\nonly showing top 3 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1608984862934_1189572451","id":"20201226-211422_1126595479","dateCreated":"2020-12-26T21:14:22+0900","dateStarted":"2020-12-26T21:18:47+0900","dateFinished":"2020-12-26T21:18:50+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:189"},{"text":"// Select, SelectExpr\nflight15.selectExpr(\"avg(count)\",\"count(distinct(DEST_COUNTRY_NAME))\").show(3)\n","user":"anonymous","dateUpdated":"2020-12-26T21:45:04+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+---------------------------------+\n| avg(count)|count(DISTINCT DEST_COUNTRY_NAME)|\n+-----------+---------------------------------+\n|1770.765625|                              132|\n+-----------+---------------------------------+\n\r\n"}]},"apps":[],"jobName":"paragraph_1608986648014_-50047616","id":"20201226-214408_1181933081","dateCreated":"2020-12-26T21:44:08+0900","dateStarted":"2020-12-26T21:45:04+0900","dateFinished":"2020-12-26T21:45:19+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:190"},{"text":"%md\n## 2. 컬럼과 표현식\n컬럼을 생성하는 방법으로 col,columns 함수가 있습니다. 컬럼명을 인수로 받아 컬럼을 생성합니다. ","user":"anonymous","dateUpdated":"2020-12-26T14:55:34+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2. 컬럼과 표현식</h2>\n<p>컬럼을 생성하는 방법으로 col,columns 함수가 있습니다. 컬럼명을 인수로 받아 컬럼을 생성합니다.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1608954440550_-214230353","id":"20201226-124720_799122737","dateCreated":"2020-12-26T12:47:20+0900","dateStarted":"2020-12-26T14:55:34+0900","dateFinished":"2020-12-26T14:55:34+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:191"},{"text":"%md\n#### ** 표현식\n\n- DataFrame 레코드의 여러 값에 대한 트랜스포메이션 집합입니다. 다시 말해, 여러 컬럼명을 입력받아 식별하고, 단일 값을 만들기 위해 다양한 표현식을 레코드에 적용하는 함수라고 할 수 있습니다.\n\n- 컬럼도 일종의 표현식으로, 표현식의 기능을 제공합니다.\n\n- 컬럼과 컬럼의 트랜스포메이션은 파싱된 표현식과 동일한 논리적 실행 계획으로 컴파일 됩니다.\n\n","user":"anonymous","dateUpdated":"2020-12-26T14:51:27+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>** 표현식</h4>\n<ul>\n  <li>\n  <p>DataFrame 레코드의 여러 값에 대한 트랜스포메이션 집합입니다. 다시 말해, 여러 컬럼명을 입력받아 식별하고, 단일 값을 만들기 위해 다양한 표현식을 레코드에 적용하는 함수라고 할 수 있습니다.</p></li>\n  <li>\n  <p>컬럼도 일종의 표현식으로, 표현식의 기능을 제공합니다.</p></li>\n  <li>\n  <p>컬럼과 컬럼의 트랜스포메이션은 파싱된 표현식과 동일한 논리적 실행 계획으로 컴파일 됩니다.</p></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1608954727526_149176569","id":"20201226-125207_1619029580","dateCreated":"2020-12-26T12:52:07+0900","dateStarted":"2020-12-26T14:51:27+0900","dateFinished":"2020-12-26T14:51:27+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:192"},{"text":"// 1-1) 컬럼 생성\nimport org.apache.spark.sql.functions.{col,column}\n\ncol(\"someColumnName\")\ncolumn(\"someColumnName\")\n","user":"anonymous","dateUpdated":"2020-12-26T22:12:50+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.{col, column}\r\nres2: org.apache.spark.sql.Column = someColumnName\n"}]},"apps":[],"jobName":"paragraph_1608953901171_1716929982","id":"20201226-123821_813741884","dateCreated":"2020-12-26T12:38:21+0900","dateStarted":"2020-12-26T12:51:26+0900","dateFinished":"2020-12-26T12:51:27+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:193"},{"text":"// 1-2) 명시적 컬럼 참조\nflight15.col(\"count\")","user":"anonymous","dateUpdated":"2020-12-26T22:12:47+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res9: org.apache.spark.sql.Column = count\n"}]},"apps":[],"jobName":"paragraph_1608953817409_-1295607725","id":"20201226-123657_1127678901","dateCreated":"2020-12-26T12:36:57+0900","dateStarted":"2020-12-26T14:14:20+0900","dateFinished":"2020-12-26T14:14:21+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:194"},{"text":"// 1-3) 다양한 컬럼 참조 방법\nflight15.select(\n    expr(\"DEST_COUNTRY_NAME AS dest\"),\n    col(\"DEST_COUNTRY_NAME\").alias(\"DEST\"),\n    'DEST_COUNTRY_NAME,\n    $\"DEST_COUNTRY_NAME\",\n    column(\"DEST_COUNTRY_NAME\")\n    ).show(2)","user":"anonymous","dateUpdated":"2020-12-26T22:12:54+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-------------+-----------------+-----------------+-----------------+\n|         dest|         DEST|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|DEST_COUNTRY_NAME|\n+-------------+-------------+-----------------+-----------------+-----------------+\n|United States|United States|    United States|    United States|    United States|\n|United States|United States|    United States|    United States|    United States|\n+-------------+-------------+-----------------+-----------------+-----------------+\nonly showing top 2 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1608985369112_-1997190986","id":"20201226-212249_80318807","dateCreated":"2020-12-26T21:22:49+0900","dateStarted":"2020-12-26T21:40:19+0900","dateFinished":"2020-12-26T21:40:20+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:195"},{"text":"// 2) DataFrame 컬럼에 접근하기\nspark.read.format(\"json\")\n    .load(\"C:/HadoopEco/spark-2.4.7-bin-hadoop2.7/data/flight-data/json/2015-summary.json\").columns","user":"anonymous","dateUpdated":"2020-12-26T22:12:35+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res13: Array[String] = Array(DEST_COUNTRY_NAME, ORIGIN_COUNTRY_NAME, count)\n"}]},"apps":[],"jobName":"paragraph_1608961887479_1652078937","id":"20201226-145127_731992784","dateCreated":"2020-12-26T14:51:27+0900","dateStarted":"2020-12-26T14:55:53+0900","dateFinished":"2020-12-26T14:55:54+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:196"},{"text":"// 3) 컬럼 추가 : withColumn\nflight15.withColumn(\"withinCountry\",expr(\"ORIGIN_COUNTRY_NAME == DEST_COUNTRY_NAME\")).show(3)\n\nflight15.withColumnRenamed(\"DEST_COUNTRY_NAME\",\"dest\").columns   \n","user":"anonymous","dateUpdated":"2020-12-26T22:17:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Romania|   15|\n|    United States|            Croatia|    1|\n+-----------------+-------------------+-----+\nonly showing top 2 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1608986884964_-1813839681","id":"20201226-214804_1178290330","dateCreated":"2020-12-26T21:48:04+0900","dateStarted":"2020-12-26T22:17:38+0900","dateFinished":"2020-12-26T22:17:39+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:197"},{"text":"/* 4) 예약문자와 키워드\n- 공백이나 하이픈 같은 예약 문자는 컬럼명에 사용할 수 없음\n- 예약 문자를 컬럼명에 사용하려면 (`)문자를 이용해 이스케이핑 해야함.\n*/\n\nimport org.apache.spark.sql.functions.expr\n\nval dfWithLongColName=flight15.withColumn(\n    \"This Long Column-Name\",\n    expr(\"ORIGIN_COUNTRY_NAME\")\n    )\n\ndfWithLongColName.selectExpr(\n    \"`This Long Column-Name`\",\n    \"`This Long Column-Name` as `new col`\")\n    .show(2)","user":"anonymous","dateUpdated":"2020-12-26T22:12:25+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+-------+\n|This Long Column-Name|new col|\n+---------------------+-------+\n|              Romania|Romania|\n|              Croatia|Croatia|\n+---------------------+-------+\nonly showing top 2 rows\n\r\nimport org.apache.spark.sql.functions.expr\r\ndfWithLongColName: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1608987769043_-34348850","id":"20201226-220249_1910996086","dateCreated":"2020-12-26T22:02:49+0900","dateStarted":"2020-12-26T22:09:11+0900","dateFinished":"2020-12-26T22:09:12+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:198"},{"text":"// 5) 컬럼 제거 : select외에 drop으로도 컬럼 제거 가능\r\nflight15.drop(\"ORIGIN_COUNTRY_NAME\").columns\r\n","user":"anonymous","dateUpdated":"2020-12-26T22:18:30+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res28: Array[String] = Array(DEST_COUNTRY_NAME, count)\n"}]},"apps":[],"jobName":"paragraph_1608988384778_-1794918896","id":"20201226-221304_19171956","dateCreated":"2020-12-26T22:13:04+0900","dateStarted":"2020-12-26T22:18:30+0900","dateFinished":"2020-12-26T22:18:31+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:199"},{"text":"// 6) 데이터 타입 변경\nflight15.withColumn(\"count2\",col(\"count\").cast(\"string\"))","user":"anonymous","dateUpdated":"2020-12-26T22:23:22+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res32: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1608988935002_268501073","id":"20201226-222215_288551765","dateCreated":"2020-12-26T22:22:15+0900","dateStarted":"2020-12-26T22:23:22+0900","dateFinished":"2020-12-26T22:23:22+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:200"},{"text":"%md\n## 3. 로우 생성 및 참조\n","user":"anonymous","dateUpdated":"2020-12-26T21:47:47+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>3. 로우 생성 및 참조</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1608961896334_-698278965","id":"20201226-145136_1930021270","dateCreated":"2020-12-26T14:51:36+0900","dateStarted":"2020-12-26T21:47:47+0900","dateFinished":"2020-12-26T21:47:47+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:201"},{"text":"// 로우 생성하기\nimport org.apache.spark.sql.Row\n\nval myRow=Row(\"Hello\",null,1,false)\nmyRow\n","user":"anonymous","dateUpdated":"2020-12-26T14:56:45+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\r\nmyRow: org.apache.spark.sql.Row = [Hello,null,1,false]\r\nres14: org.apache.spark.sql.Row = [Hello,null,1,false]\n"}]},"apps":[],"jobName":"paragraph_1608962116156_-1508631838","id":"20201226-145516_1855817077","dateCreated":"2020-12-26T14:55:16+0900","dateStarted":"2020-12-26T14:56:45+0900","dateFinished":"2020-12-26T14:56:45+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:202"},{"text":"// 2) 로우 필터링 : filter 또는 where 메서드로 로우 필터링\nflight15.where(col(\"count\")<2).where(col(\"ORIGIN_COUNTRY_NAME\")=!=\"Croatia\")\n        .show(3)","user":"anonymous","dateUpdated":"2020-12-26T22:32:05+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|          Singapore|    1|\n|          Moldova|      United States|    1|\n|            Malta|      United States|    1|\n+-----------------+-------------------+-----+\nonly showing top 3 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1608989386795_1001226733","id":"20201226-222946_87477243","dateCreated":"2020-12-26T22:29:46+0900","dateStarted":"2020-12-26T22:32:05+0900","dateFinished":"2020-12-26T22:32:06+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:203"},{"text":"// 3) 고유한 로우 얻기\r\nflight15.select(\"ORIGIN_COUNTRY_NAME\").distinct().count()\r\n","user":"anonymous","dateUpdated":"2020-12-26T23:03:03+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res35: Long = 125\n"}]},"apps":[],"jobName":"paragraph_1608991338848_1627092958","id":"20201226-230218_1464798206","dateCreated":"2020-12-26T23:02:18+0900","dateStarted":"2020-12-26T23:03:03+0900","dateFinished":"2020-12-26T23:03:09+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:204"},{"text":"/*\r\n4) 로우 합치기 + 추가하기\r\n\r\n- DataFrame을 변경할 수 없으므로 DataFrame에 레코드를 추가하려면 원래 DataFrame과 새로운 DataFrame을통합 해야 합니다.\r\n- 통합하려는 2개의 DataFrame은 반드시 동일한 스키마와 컬럼수를 가져야 합니다.\r\n*/\r\nimport org.apache.spark.sql.Row\r\n\r\n// 원래 DataFrame과 동일한 스키마 만들기\r\nval shcema=flight15.schema\r\n\r\n// 추가할 로우 생성\r\nval newRows=Seq(\r\n    Row(\"New Country\",\"Other Country\",5L),\r\n    Row(\"New Country 2\",\"Other Country 3\",1L)\r\n    )\r\n    \r\n/* parallelize() \r\n: 새로운 로우를 텍스트 리스트를 parallelize() 메서드로 데이터를 가져옴.\r\n데이터세트를 넘겨주고 RDD를 생성시킴. spark.createDataFrame 메서드로 데이터 프레임에 넣기*/\r\nval parallelizeRows=spark.sparkContext.parallelize(newRows)\r\nval newDF=spark.createDataFrame(parallelizeRows,shcema)\r\n\r\n// Dataframe 병합\r\nflight15.union(newDF)\r\n    .where(\"count=1\")\r\n    .where($\"ORIGIN_COUNTRY_NAME\"=!=\"United States\")\r\n    .show(3)","user":"anonymous","dateUpdated":"2020-12-26T23:24:38+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Croatia|    1|\n|    United States|          Singapore|    1|\n|    United States|          Gibraltar|    1|\n+-----------------+-------------------+-----+\nonly showing top 3 rows\n\r\nimport org.apache.spark.sql.Row\r\nshcema: org.apache.spark.sql.types.StructType = StructType(StructField(DEST_COUNTRY_NAME,StringType,true), StructField(ORIGIN_COUNTRY_NAME,StringType,true), StructField(count,LongType,true))\r\nnewRows: Seq[org.apache.spark.sql.Row] = List([New Country,Other Country,5], [New Country 2,Other Country 3,1])\r\nparallelizeRows: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = ParallelCollectionRDD[86] at parallelize at <console>:49\r\nnewDF: org.apache.spark.sql.DataFrame = [DEST_COUNTRY_NAME: string, ORIGIN_COUNTRY_NAME: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1608962205276_-1674044993","id":"20201226-145645_195082670","dateCreated":"2020-12-26T14:56:45+0900","dateStarted":"2020-12-26T23:13:34+0900","dateFinished":"2020-12-26T23:13:35+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:205"},{"text":"// 5) 로우 정렬하기\r\nflight15.sort(\"ORIGIN_COUNTRY_NAME\").show(5)\r\n\r\n// desc, asc 지정\r\nflight15.orderBy(expr(\"count desc\")).show(3)\r\nflight15.sort(asc(\"count\"))\r\n        .orderBy(desc(\"DEST_COUNTRY_NAME\"))\r\n        .show(3)\r\n\r\n// 파티션 별 정렬 수행 >> 트랜스포메이션 처리 전 성능 최적화를 위해\r\nflight15.sortWithinPartitions(\"ORIGIN_COUNTRY_NAME\").show(4)","user":"anonymous","dateUpdated":"2020-12-26T23:34:23+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|             Angola|   13|\n|    United States|           Anguilla|   38|\n|    United States|Antigua and Barbuda|  117|\n|    United States|          Argentina|  141|\n|    United States|              Aruba|  342|\n+-----------------+-------------------+-----+\nonly showing top 5 rows\n\r\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|          Moldova|      United States|    1|\n|    United States|          Singapore|    1|\n|    United States|            Croatia|    1|\n+-----------------+-------------------+-----+\nonly showing top 3 rows\n\r\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|           Zambia|      United States|    1|\n|        Venezuela|      United States|  290|\n|          Uruguay|      United States|   43|\n+-----------------+-------------------+-----+\nonly showing top 3 rows\n\r\n+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|             Angola|   13|\n|    United States|           Anguilla|   38|\n|    United States|Antigua and Barbuda|  117|\n|    United States|          Argentina|  141|\n+-----------------+-------------------+-----+\nonly showing top 4 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1608992719512_2111135279","id":"20201226-232519_556614582","dateCreated":"2020-12-26T23:25:19+0900","dateStarted":"2020-12-26T23:34:23+0900","dateFinished":"2020-12-26T23:34:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"// 6) 로우 수 제한 : limit\nflight15.limit(5).show()","user":"anonymous","dateUpdated":"2020-12-26T23:30:36+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------+-------------------+-----+\n|DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count|\n+-----------------+-------------------+-----+\n|    United States|            Romania|   15|\n|    United States|            Croatia|    1|\n|    United States|            Ireland|  344|\n|            Egypt|      United States|   15|\n|    United States|              India|   62|\n+-----------------+-------------------+-----+\n\r\n"}]},"apps":[],"jobName":"paragraph_1608991683211_-1527313709","id":"20201226-230803_970783866","dateCreated":"2020-12-26T23:08:03+0900","dateStarted":"2020-12-26T23:30:36+0900","dateFinished":"2020-12-26T23:30:36+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"text":"// 7) 드라이버로 로우 데이터 수집\n// 스파크는 드라이버에서 클러스터 상태 정보를 유지하므로,\n// 로컬 환경에서 데이터를 다룰 때 드라이버로 데이터를 수집해야 한다.\nflight15.take(5)\nflight15.collect()\nflight15.show(2)\n\n// 전체 데이터 셋에 대한 반복(iterator)처리를 위해 toLocalIterator 메서드로 드라이버로 로우를 모은다.\n// toLocalIterator 메서드는 모든 파티션의 데이터를 드라이버에 전달, 파티션을 차례로 반복 처리 할 수 있다.\nflight15.toLocalIterator()\n","user":"anonymous","dateUpdated":"2020-12-26T23:54:23+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res52: java.util.Iterator[org.apache.spark.sql.Row] = IteratorWrapper(non-empty iterator)\n"}]},"apps":[],"jobName":"paragraph_1608994246759_20097786","id":"20201226-235046_1769318257","dateCreated":"2020-12-26T23:50:46+0900","dateStarted":"2020-12-26T23:54:16+0900","dateFinished":"2020-12-26T23:54:17+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1608994445412_-24991308","id":"20201226-235405_243388025","dateCreated":"2020-12-26T23:54:05+0900","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:209"}],"name":"part2_ch2_구조적API기본연산","id":"2FUMXTZPT","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
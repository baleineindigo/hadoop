{"paragraphs":[{"text":"%md\n## 집계 연산\n\n스파크는 모든 데이터 타입을 다루는 것 외에도 그룹화 데이터 타입 생성도 가능하다\n그룹화된 경과는 지정된 집계 함수에 따라 RlationalGroupedDataset을 반환한다.\n","user":"anonymous","dateUpdated":"2020-12-28T17:08:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>집계 연산</h2>\n<p>스파크는 모든 데이터 타입을 다루는 것 외에도 그룹화 데이터 타입 생성도 가능하다<br/>그룹화된 경과는 지정된 집계 함수에 따라 RlationalGroupedDataset을 반환한다.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1609135034279_1597143631","id":"20201228-145714_1240950787","dateCreated":"2020-12-28T14:57:14+0900","dateStarted":"2020-12-28T15:00:44+0900","dateFinished":"2020-12-28T15:00:46+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:328"},{"text":"// 데이터 셋팅\nval retail_all=spark.read.format(\"csv\")\n                .option(\"header\",\"true\")\n                .option(\"inferSchema\",\"true\")\n                .load(\"C:/HadoopEco/spark-2.4.7-bin-hadoop2.7/data/retail-data/all/*.csv\")\nretail_all.cache()\nretail_all.createOrReplaceTempView(\"retail_allTable\")\nretail_all.show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|   InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|12/1/2010 8:26|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|12/1/2010 8:26|     2.75|     17850|United Kingdom|\n|   536365|   84029G|KNITTED UNION FLA...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84029E|RED WOOLLY HOTTIE...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|    22752|SET 7 BABUSHKA NE...|       2|12/1/2010 8:26|     7.65|     17850|United Kingdom|\n|   536365|    21730|GLASS STAR FROSTE...|       6|12/1/2010 8:26|     4.25|     17850|United Kingdom|\n|   536366|    22633|HAND WARMER UNION...|       6|12/1/2010 8:28|     1.85|     17850|United Kingdom|\n|   536366|    22632|HAND WARMER RED P...|       6|12/1/2010 8:28|     1.85|     17850|United Kingdom|\n|   536367|    84879|ASSORTED COLOUR B...|      32|12/1/2010 8:34|     1.69|     13047|United Kingdom|\n|   536367|    22745|POPPY'S PLAYHOUSE...|       6|12/1/2010 8:34|      2.1|     13047|United Kingdom|\n|   536367|    22748|POPPY'S PLAYHOUSE...|       6|12/1/2010 8:34|      2.1|     13047|United Kingdom|\n|   536367|    22749|FELTCRAFT PRINCES...|       8|12/1/2010 8:34|     3.75|     13047|United Kingdom|\n|   536367|    22310|IVORY KNITTED MUG...|       6|12/1/2010 8:34|     1.65|     13047|United Kingdom|\n|   536367|    84969|BOX OF 6 ASSORTED...|       6|12/1/2010 8:34|     4.25|     13047|United Kingdom|\n|   536367|    22623|BOX OF VINTAGE JI...|       3|12/1/2010 8:34|     4.95|     13047|United Kingdom|\n|   536367|    22622|BOX OF VINTAGE AL...|       2|12/1/2010 8:34|     9.95|     13047|United Kingdom|\n|   536367|    21754|HOME BUILDING BLO...|       3|12/1/2010 8:34|     5.95|     13047|United Kingdom|\n|   536367|    21755|LOVE BUILDING BLO...|       3|12/1/2010 8:34|     5.95|     13047|United Kingdom|\n|   536367|    21777|RECIPE BOX WITH M...|       4|12/1/2010 8:34|     7.95|     13047|United Kingdom|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\nonly showing top 20 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1609135244207_273666329","id":"20201228-150044_1830026716","dateCreated":"2020-12-28T15:00:44+0900","dateStarted":"2020-12-28T15:05:42+0900","dateFinished":"2020-12-28T15:05:44+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:329"},{"text":"%md\n\n### 1. 집계 함수\n대부분의 집계 함수는 import org.apache.spark.sql.functions 패키지에서 제공된다\n","user":"anonymous","dateUpdated":"2020-12-28T17:08:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>1. 집계 함수</h3>\n<p>대부분의 집계 함수는 import org.apache.spark.sql.functions 패키지에서 제공된다</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1609135426580_2038140828","id":"20201228-150346_1239839475","dateCreated":"2020-12-28T15:03:46+0900","dateStarted":"2020-12-28T16:20:25+0900","dateFinished":"2020-12-28T16:20:25+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:330"},{"text":"import org.apache.spark.sql.functions.count\n\n// 1) count : 전체 레코드 수\n// count(*) : null값을 가진 로우를 포함하여 카운트, \n// count(\"컬럼명\") : null 포함한 로우는 세지 않음\nretail_all.select(count(\"StockCode\")).show(4)\n    \nretail_all.select(count(\"*\")).show(4)    ","user":"anonymous","dateUpdated":"2020-12-28T17:08:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------+\n|count(StockCode)|\n+----------------+\n|          541909|\n+----------------+\n\r\n+--------+\n|count(1)|\n+--------+\n|  541909|\n+--------+\n\r\nimport org.apache.spark.sql.functions.{count, countDistinct, approx_count_distinct, first, last, min, max, sum, sumDistinct, avg}\n"}]},"apps":[],"jobName":"paragraph_1609135634408_862330726","id":"20201228-150714_1106215514","dateCreated":"2020-12-28T15:07:14+0900","dateStarted":"2020-12-28T15:12:01+0900","dateFinished":"2020-12-28T15:12:02+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:331"},{"text":"// 2) countDistinct : 고유 레코드 수\nimport org.apache.spark.sql.functions.countDistinct\nretail_all.select(\n    countDistinct(\"StockCode\")).show(4)","user":"anonymous","dateUpdated":"2020-12-28T17:08:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------------+\n|count(DISTINCT StockCode)|\n+-------------------------+\n|                     4070|\n+-------------------------+\n\r\n"}]},"apps":[],"jobName":"paragraph_1609135736413_-1977009982","id":"20201228-150856_1259128427","dateCreated":"2020-12-28T15:08:56+0900","dateStarted":"2020-12-28T15:12:49+0900","dateFinished":"2020-12-28T15:12:55+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"// 3) approx_count_distinct : 어느 정도 정확도를 가지는 근사치로 산출\n// 최대 추정 오류율을 설정하여 기대치에서 크게 벗어나는 결과를 얻게 되지만 countDistinct보다 더 빠르게 결과 반환\nimport org.apache.spark.sql.functions.approx_count_distinct\n\nretail_all.select(approx_count_distinct(\"StockCode\",0.1)).show()\n// countDistinct 4070","user":"anonymous","dateUpdated":"2020-12-28T17:08:57+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------------------+\n|approx_count_distinct(StockCode)|\n+--------------------------------+\n|                            3364|\n+--------------------------------+\n\r\nimport org.apache.spark.sql.functions.approx_count_distinct\n"}]},"apps":[],"jobName":"paragraph_1609135936421_485513834","id":"20201228-151216_1503569626","dateCreated":"2020-12-28T15:12:16+0900","dateStarted":"2020-12-28T15:16:15+0900","dateFinished":"2020-12-28T15:16:16+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333"},{"text":"// 4) first,last : 첫번째/마지막 값을 얻을 때 사용. DataFrame이 아니라 로우 기반으로 동작\nimport org.apache.spark.sql.functions.{first,last}\n\nretail_all.select(first(\"StockCode\"),last(\"StockCode\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------+---------------+\n|first(StockCode)|last(StockCode)|\n+----------------+---------------+\n|          85123A|          22138|\n+----------------+---------------+\n\r\nimport org.apache.spark.sql.functions.{first, last}\n"}]},"apps":[],"jobName":"paragraph_1609136016870_-1531633096","id":"20201228-151336_2036077683","dateCreated":"2020-12-28T15:13:36+0900","dateStarted":"2020-12-28T15:19:30+0900","dateFinished":"2020-12-28T15:19:30+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"// 5) min,max\nimport org.apache.spark.sql.functions.{min,max}\n\nretail_all.select(min(\"UnitPrice\"),max(\"UnitPrice\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-------------+\n|min(Quantity)|max(Quantity)|\n+-------------+-------------+\n|       -80995|        80995|\n+-------------+-------------+\n\r\n+--------------+--------------+\n|min(UnitPrice)|max(UnitPrice)|\n+--------------+--------------+\n|     -11062.06|       38970.0|\n+--------------+--------------+\n\r\nimport org.apache.spark.sql.functions.{min, max}\n"}]},"apps":[],"jobName":"paragraph_1609136017348_-2116127404","id":"20201228-151337_951426122","dateCreated":"2020-12-28T15:13:37+0900","dateStarted":"2020-12-28T15:20:12+0900","dateFinished":"2020-12-28T15:20:13+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335"},{"text":"import org.apache.spark.sql.functions.{sum,sumDistinct}\n// 6) sum : 컬럼 내 모든 값 합산\nretail_all.select(sum(\"Quantity\")).show()\n// 7) sumDistinct : 고유값 합산\nretail_all.select(sumDistinct(\"Quantity\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+\n|sum(Quantity)|\n+-------------+\n|      5176450|\n+-------------+\n\r\n+----------------------+\n|sum(DISTINCT Quantity)|\n+----------------------+\n|                 29310|\n+----------------------+\n\r\nimport org.apache.spark.sql.functions.{sum, sumDistinct}\n"}]},"apps":[],"jobName":"paragraph_1609136017692_809456978","id":"20201228-151337_56629330","dateCreated":"2020-12-28T15:13:37+0900","dateStarted":"2020-12-28T15:21:12+0900","dateFinished":"2020-12-28T15:21:16+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"text":"// 8) 평균\nimport org.apache.spark.sql.functions.{avg,round}\n\nretail_all.select(\n    round(count(\"Quantity\").alias(\"Total_transaction\"),3),\n    round(sum(col(\"Quantity\")*col(\"UnitPrice\")).alias(\"Total_Return\"),3),\n    round(avg(\"UnitPrice\").alias(\"Average_UnitPrice\"),3)\n    ).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------------------+-------------------------------------------------------+-----------------------------------------------+\n|round(count(Quantity) AS `Total_transaction`, 3)|round(sum((Quantity * UnitPrice)) AS `Total_Return`, 3)|round(avg(UnitPrice) AS `Average_UnitPrice`, 3)|\n+------------------------------------------------+-------------------------------------------------------+-----------------------------------------------+\n|                                          541909|                                            9747747.934|                                          4.611|\n+------------------------------------------------+-------------------------------------------------------+-----------------------------------------------+\n\r\nimport org.apache.spark.sql.functions.{avg, round}\n"}]},"apps":[],"jobName":"paragraph_1609136017179_534021768","id":"20201228-151337_1967840244","dateCreated":"2020-12-28T15:13:37+0900","dateStarted":"2020-12-28T15:38:58+0900","dateFinished":"2020-12-28T15:38:59+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"text":"// 9) 분산과 표준 편차\n// 스파크는 표본표준편차와 모표준편차 방식 2개 모두 지원함.\nimport org.apache.spark.sql.functions.{variance,stddev}\nimport org.apache.spark.sql.functions.{variance,stddev}\n\n// - 표본분산/표준편차 : variance/stddev\nretail_all.select(variance(\"Quantity\"),stddev(\"Quantity\")).show()\nretail_all.select(var_samp(\"Quantity\"),stddev_samp(\"Quantity\")).show()\n\n// - 모분산/표준편차 : var_pop/stddev_pop\nretail_all.select(var_pop(\"Quantity\"),stddev_pop(\"Quantity\")).show()                \n","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------+---------------------+\n|var_samp(Quantity)|stddev_samp(Quantity)|\n+------------------+---------------------+\n| 47559.39140929892|   218.08115785023455|\n+------------------+---------------------+\n\r\n+------------------+---------------------+\n|var_samp(Quantity)|stddev_samp(Quantity)|\n+------------------+---------------------+\n| 47559.39140929892|   218.08115785023455|\n+------------------+---------------------+\n\r\n+-----------------+--------------------+\n|var_pop(Quantity)|stddev_pop(Quantity)|\n+-----------------+--------------------+\n|47559.30364660923|  218.08095663447835|\n+-----------------+--------------------+\n\r\nimport org.apache.spark.sql.functions.{variance, stddev}\r\nimport org.apache.spark.sql.functions.{variance, stddev}\n"}]},"apps":[],"jobName":"paragraph_1609136326856_-1519073904","id":"20201228-151846_8523328","dateCreated":"2020-12-28T15:18:46+0900","dateStarted":"2020-12-28T16:05:51+0900","dateFinished":"2020-12-28T16:05:52+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"// 10) 비대칭과 첨도\nimport org.apache.spark.sql.functions.{skewness,kurtosis}\nretail_all.select(\n    skewness(\"Quantity\"),kurtosis(\"Quantity\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+------------------+\n|  skewness(Quantity)|kurtosis(Quantity)|\n+--------------------+------------------+\n|-0.26407557610528376|119768.05495530753|\n+--------------------+------------------+\n\r\nimport org.apache.spark.sql.functions.{skewness, kurtosis}\n"}]},"apps":[],"jobName":"paragraph_1609137603145_-2008549440","id":"20201228-154003_421679704","dateCreated":"2020-12-28T15:40:03+0900","dateStarted":"2020-12-28T16:13:29+0900","dateFinished":"2020-12-28T16:13:31+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"text":"// 11) 공분산과 상관관계\nimport org.apache.spark.sql.functions.{corr,covar_pop,covar_samp}\nretail_all.select(\n    corr(\"UnitPrice\",\"Quantity\")\n    ,covar_pop(\"UnitPrice\",\"Quantity\")\n    ,covar_samp(\"UnitPrice\",\"Quantity\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------------+------------------------------+-------------------------------+\n|corr(UnitPrice, Quantity)|covar_pop(UnitPrice, Quantity)|covar_samp(UnitPrice, Quantity)|\n+-------------------------+------------------------------+-------------------------------+\n|     -0.00123492454487...|           -26.058713170968097|             -26.05876125793705|\n+-------------------------+------------------------------+-------------------------------+\n\r\nimport org.apache.spark.sql.functions.{corr, covar_pop, covar_samp}\n"}]},"apps":[],"jobName":"paragraph_1609137603809_-491638765","id":"20201228-154003_789764709","dateCreated":"2020-12-28T15:40:03+0900","dateStarted":"2020-12-28T16:14:48+0900","dateFinished":"2020-12-28T16:14:49+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340"},{"text":"// 12) 복합 데이터 타입의 집계\n// collect_set :  셋 데이터 타입\n// collect_list : 리스트 데이터 타입\nimport org.apache.spark.sql.functions.{collect_list,collect_set}\nretail_all.agg(collect_list(\"Country\"),collect_set(\"Country\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+--------------------+\n|collect_list(Country)|collect_set(Country)|\n+---------------------+--------------------+\n| [United Kingdom, ...|[Portugal, Italy,...|\n+---------------------+--------------------+\n\r\nimport org.apache.spark.sql.functions.{collect_list, collect_set}\n"}]},"apps":[],"jobName":"paragraph_1609137603491_-2022687104","id":"20201228-154003_1907247494","dateCreated":"2020-12-28T15:40:03+0900","dateStarted":"2020-12-28T16:19:29+0900","dateFinished":"2020-12-28T16:19:32+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341"},{"text":"%md\n\n### 2. 그룹화\n데이터 그룹 기반의 집계는 단일 컬럼의 데이터를 그룹화하고 해당 그룹의 다른 여러 컬럼을 사용해서 계산하기 위해 카테고리형 데이터를 사용한다.\n그룹화 작업은 \n1) 하나 이상의 컬럼을 그룹화 하고(RelationalGroupedDataset 반환)\n2) 집계 연산을 수행하는 단계(DataFrame 반환)로 이뤄진다.","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>2. 그룹화</h3>\n<p>데이터 그룹 기반의 집계는 단일 컬럼의 데이터를 그룹화하고 해당 그룹의 다른 여러 컬럼을 사용해서 계산하기 위해 카테고리형 데이터를 사용한다.<br/>그룹화 작업은<br/>1) 하나 이상의 컬럼을 그룹화 하고(RelationalGroupedDataset 반환)<br/>2) 집계 연산을 수행하는 단계(DataFrame 반환)로 이뤄진다.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1609140029088_-2118988787","id":"20201228-162029_1971161868","dateCreated":"2020-12-28T16:20:29+0900","dateStarted":"2020-12-28T16:29:56+0900","dateFinished":"2020-12-28T16:29:56+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342"},{"text":"// 그룹화\nretail_all.groupBy(\"InvoiceNo\",\"CustomerId\").count().show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+----------+-----+\n|InvoiceNo|CustomerId|count|\n+---------+----------+-----+\n|   536846|     14573|   76|\n|   537026|     12395|   12|\n|   537883|     14437|    5|\n|   538068|     17978|   12|\n|   538279|     14952|    7|\n|   538800|     16458|   10|\n|   538942|     17346|   12|\n|  C539947|     13854|    1|\n|   540096|     13253|   16|\n|   540530|     14755|   27|\n|   541225|     14099|   19|\n|   541978|     13551|    4|\n|   542093|     17677|   16|\n|   543188|     12567|   63|\n|   543590|     17377|   19|\n|  C543757|     13115|    1|\n|  C544318|     12989|    1|\n|   544578|     12365|    1|\n|   545165|     16339|   20|\n|   545289|     14732|   30|\n+---------+----------+-----+\nonly showing top 20 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1609137604138_-1516404578","id":"20201228-154004_1962832240","dateCreated":"2020-12-28T15:40:04+0900","dateStarted":"2020-12-28T16:38:36+0900","dateFinished":"2020-12-28T16:38:41+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:343"},{"text":"/* 1) 표현식을 이용한 그룹화\nagg 메서드로 여러 집계 처리를 한 번에 지정할 수 있으며, 집계에 표현식을 사용할 수 있다.\n또한, 트랜스포메이션이 완료된 컬럼에 alias메서드를 적용 가능 */\nretail_all.groupBy(\"InvoiceNo\").agg(\n    count(\"Quantity\").alias(\"quant\"),\n    expr(\"count(Quantity)\")\n    ).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-----+---------------+\n|InvoiceNo|quant|count(Quantity)|\n+---------+-----+---------------+\n|   536596|    6|              6|\n|   536938|   14|             14|\n|   537252|    1|              1|\n|   537691|   20|             20|\n|   538041|    1|              1|\n|   538184|   26|             26|\n|   538517|   53|             53|\n|   538879|   19|             19|\n|   539275|    6|              6|\n|   539630|   12|             12|\n|   540499|   24|             24|\n|   540540|   22|             22|\n|  C540850|    1|              1|\n|   540976|   48|             48|\n|   541432|    4|              4|\n|   541518|  101|            101|\n|   541783|   35|             35|\n|   542026|    9|              9|\n|   542375|    6|              6|\n|  C542604|    8|              8|\n+---------+-----+---------------+\nonly showing top 20 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1609140575570_456705763","id":"20201228-162935_1572907829","dateCreated":"2020-12-28T16:29:35+0900","dateStarted":"2020-12-28T16:38:53+0900","dateFinished":"2020-12-28T16:38:58+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344"},{"text":"/* 2) 맵을 이용한 그룹화\n컬럼을 키로, 수행할 집계 함수의 문자열을 값으로 하는 맵 타입을 사용하여 트랜스포메이션을 정의.\n수행할 집계 함수를 한 줄로 작성하면 여러 컬럼명을 재사용 가능 */\nretail_all.groupBy(\"InvoiceNo\").agg(expr(\"avg(Quantity)\"),expr(\"stddev_pop(Quantity)\")).show()","user":"anonymous","dateUpdated":"2020-12-28T17:08:58+0900","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+------------------+--------------------+\n|InvoiceNo|     avg(Quantity)|stddev_pop(Quantity)|\n+---------+------------------+--------------------+\n|   536596|               1.5|  1.1180339887498947|\n|   536938|33.142857142857146|  20.698023172885524|\n|   537252|              31.0|                 0.0|\n|   537691|              8.15|   5.597097462078001|\n|   538041|              30.0|                 0.0|\n|   538184|12.076923076923077|   8.142590198943392|\n|   538517|3.0377358490566038|  2.3946659604837897|\n|   538879|21.157894736842106|  11.811070444356483|\n|   539275|              26.0|  12.806248474865697|\n|   539630|20.333333333333332|  10.225241100118645|\n|   540499|              3.75|  2.6653642652865788|\n|   540540|2.1363636363636362|  1.0572457590557278|\n|  C540850|              -1.0|                 0.0|\n|   540976|10.520833333333334|   6.496760677872902|\n|   541432|             12.25|  10.825317547305483|\n|   541518| 23.10891089108911|  20.550782784878713|\n|   541783|11.314285714285715|   8.467657556242811|\n|   542026| 7.666666666666667|   4.853406592853679|\n|   542375|               8.0|  3.4641016151377544|\n|  C542604|              -8.0|  15.173990905493518|\n+---------+------------------+--------------------+\nonly showing top 20 rows\n\r\n"}]},"apps":[],"jobName":"paragraph_1609140575157_-506422517","id":"20201228-162935_1810066220","dateCreated":"2020-12-28T16:29:35+0900","dateStarted":"2020-12-28T16:38:58+0900","dateFinished":"2020-12-28T16:39:05+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1609140029371_1851678392","id":"20201228-162029_668151280","dateCreated":"2020-12-28T16:20:29+0900","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:346","dateUpdated":"2020-12-28T17:08:58+0900"}],"name":"aprt2_ch7_집계연산1","id":"2FU1ASP4S","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}